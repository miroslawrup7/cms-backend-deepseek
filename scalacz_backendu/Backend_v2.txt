Backend v.2

==================================
STRUKTURA PROJEKTU
==================================

+ controllers
  - adminController.js
  - articleController.js
  - authController.js
  - commentController.js
  - userController.js
+ middleware
  - authMiddleware.js
  - isAuthor.js
  - isCommentAuthor.js
  - requireAdmin.js
  - requireAuthorOrAdmin.js
  - upload.js
  - validateObjectId.js
+ models
  - Article.js
  - Comment.js
  - PendingUser.js
  - User.js
+ routes
  - adminRoutes.js
  - articleRoutes.js
  - authRoutes.js
  - commentRoutes.js
  - userRoutes.js
+ uploads
  - 1754068886780-2025-05-08_17-46-27(1)-01.jpg
  - 1754152749228-92812186_3218584588186739_8353233957860409344_n.jpg
  - 1754156567535-92989817_3218584841520047_9082093743397404672_n.jpg
  - 1754241925862-92989817_3218584841520047_9082093743397404672_n.jpg
  - 1754310977682-92812186_3218584588186739_8353233957860409344_n.jpg
  - 1754310977688-92948159_3218584998186698_4977806751773491200_n.jpg
  - 1754310977693-92989817_3218584841520047_9082093743397404672_n.jpg
  - 1754310977698-93254356_3218584681520063_688158527956451328_n.jpg
  - 1754310977702-93303604_3218584784853386_6430330249937944576_n.jpg
  - 1754332478792-93254356_3218584681520063_688158527956451328_n.jpg
  - 1754332492051-93254356_3218584681520063_688158527956451328_n.jpg
  - 1754332582184-93303604_3218584784853386_6430330249937944576_n.jpg
  - 1754332738296-92948159_3218584998186698_4977806751773491200_n.jpg
  - 1754332774555-92989817_3218584841520047_9082093743397404672_n.jpg
  - 1754367503118-93303604_3218584784853386_6430330249937944576_n.jpg
  - 1754387409764-92948159_3218584998186698_4977806751773491200_n.jpg
  - 1754462018664-415954181.jpg
  - 1754462123958-301796897.jpg
  - 1754462384224-743992369.jpg
  - 1754462515056-53701265.jpg
  - 1754466490832-679145436.jpg
  - 1754487751546-136461086.jpg
  - 1754487788362-92598928.jpg
  - 1754487826811-398469964.jpg
  - 1754487826814-856807431.jpg
  - 1754487826816-273726342.jpg
  - 1754488665308-463888655.jpg
  - 1754491303538-69773656.jpg
  - 1754497317961-377443572.jpg
  - 1754497317966-945997040.jpg
  - 1756234408292-979512228.jpg
  - 1756318975759-173818095.jpg
+ utils
  - AppError.js
  - advancedValidate.js
  - emailTemplates.js
  - mailer.js
  - sanitize.js
  - validate.js
- .env
- server.js

==================================
adminController.js v.1
==================================

// controllers/adminController.js v.2
const bcrypt = require("bcryptjs");
const PendingUser = require("../models/PendingUser");
const User = require("../models/User");
const { sanitizeTitle } = require("../utils/sanitize");
const { sendMail } = require("../utils/mailer");
const { approvedUserEmail, rejectedUserEmail } = require("../utils/emailTemplates");
const AppError = require("../utils/AppError");

// GET /api/admin/pending-users
const getPendingUsers = async (req, res, next) => {
    try {
        const { search = "", page = 1, limit = 10 } = req.query;

        const query = {
            $or: [{ username: { $regex: search, $options: "i" } }, { email: { $regex: search, $options: "i" } }],
        };

        const skip = (parseInt(page) - 1) * parseInt(limit);

        const [total, users] = await Promise.all([
            PendingUser.countDocuments(query),
            PendingUser.find(query).sort({ createdAt: -1 }).skip(skip).limit(parseInt(limit)).lean(), // ✅ DOBRZE - tylko odczyt
        ]);

        res.json({
            total,
            page: parseInt(page),
            limit: parseInt(limit),
            users,
        });
    } catch (err) {
        next(err);
    }
};

// POST /api/admin/approve/:id
const approveUser = async (req, res, next) => {
    try {
        const { id } = req.params;
        const pending = await PendingUser.findById(id);
        if (!pending) return next(new AppError("Wniosek nie istnieje.", 404));

        const exists = await User.findOne({ email: pending.email });
        if (exists) {
            await pending.deleteOne();
            return next(new AppError("Email jest już zajęty w systemie.", 400));
        }

        const hashed = await bcrypt.hash(String(pending.password), 10);
        const user = new User({
            username: sanitizeTitle(pending.username),
            email: pending.email,
            password: hashed,
            role: pending.role,
        });
        await user.save();

        await pending.deleteOne();

        // wysyłka maila (best-effort)
        try {
            const tpl = approvedUserEmail({ username: user.username, email: user.email });
            await sendMail({ to: user.email, subject: tpl.subject, text: tpl.text, html: tpl.html });
        } catch (mailErr) {
            console.warn("approveUser: mail send failed:", mailErr?.message || mailErr);
        }

        return res.json({ message: "Użytkownik zatwierdzony i dodany do systemu.", userId: user._id });
    } catch (err) {
        next(err);
    }
};

// DELETE /api/admin/reject/:id
const rejectUser = async (req, res, next) => {
    try {
        const { id } = req.params;
        const pending = await PendingUser.findById(id);
        if (!pending) return next(new AppError("Wniosek nie istnieje.", 404));

        // wysyłka maila (best-effort)
        try {
            const tpl = rejectedUserEmail({ username: pending.username, email: pending.email });
            await sendMail({ to: pending.email, subject: tpl.subject, text: tpl.text, html: tpl.html });
        } catch (mailErr) {
            console.warn("rejectUser: mail send failed:", mailErr?.message || mailErr);
        }

        await pending.deleteOne();
        return res.json({ message: "Wniosek został odrzucony." });
    } catch (err) {
        next(err);
    }
};

module.exports = {
    getPendingUsers,
    approveUser,
    rejectUser,
};


==================================
articleController.js v.1
==================================

const articleService = require('../services/articleService');
const fs = require('fs');
const path = require('path');

const UPLOADS_DIR = path.join(__dirname, '..', 'uploads');

// Helper function (only what's necessary for the controller)
function toUploadsRel(p) {
  if (!p) return '';
  const s = String(p);
  const m = s.match(/uploads[/\\]+(.+)$/i);
  return m ? m[1] : path.basename(s);
}

// POST /api/articles
const createArticle = async (req, res) => {
  try {
    const { title, content } = req.body;

    // Map uploaded files to image paths
    const imagePaths = (req.files || []).map((f) => `uploads/${f.filename}`.replace(/\\/g, '/'));

    // Authorization check
    const author = req.user ? req.user._id : null;
    if (!author) {
      // Clean up uploads if no authorization
      imagePaths.forEach((rel) => {
        const full = path.join(UPLOADS_DIR, toUploadsRel(rel));
        fs.unlink(full, () => {});
      });
      return res.status(401).json({ message: 'Nieautoryzowany dostęp' });
    }

    // Call service
    const newArticle = await articleService.createArticle(title, content, author, imagePaths);

    return res.status(201).json({ message: 'Artykuł utworzony', article: newArticle });
  } catch (error) {
    // Clean up uploads on error
    if (req.files && req.files.length > 0) {
      for (const f of req.files) {
        const full = path.join(UPLOADS_DIR, toUploadsRel(f.filename || f.path));
        fs.unlink(full, () => {});
      }
    }
    console.error('Błąd tworzenia artykułu:', error);
    if (error.message.includes('Tytuł musi mieć') || error.message.includes('Treść musi mieć') || error.message.includes('jest wymagana')) {
      return res.status(400).json({ message: error.message });
    }
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

// GET /api/articles
const getArticles = async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 5;
    const search = (req.query.q || '').trim();
    const sort = req.query.sort || 'newest';

    const result = await articleService.getArticles(page, limit, search, sort);
    return res.json(result);
  } catch (error) {
    console.error('Błąd pobierania artykułów:', error);
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

// GET /api/articles/:id
const getArticleById = async (req, res) => {
  try {
    const { id } = req.params;
    const article = await articleService.getArticleById(id);
    return res.status(200).json(article);
  } catch (error) {
    console.error('Błąd pobierania artykułu:', error);
    if (error.message === 'Nie znaleziono artykułu') {
      return res.status(404).json({ message: error.message });
    }
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

// PUT /api/articles/:id
const updateArticle = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, content, removeImages } = req.body;

    const updateData = { title, content, removeImages };
    const result = await articleService.updateArticle(
      id,
      updateData,
      req.user._id,
      req.user.role,
      req.files
    );

    return res.json({ message: 'Artykuł zaktualizowany', article: result });
  } catch (error) {
    console.error('Błąd aktualizacji artykułu:', error);
    if (error.message === 'Artykuł nie znaleziony') {
      return res.status(404).json({ message: error.message });
    }
    if (error.message === 'Brak uprawnień do edycji') {
      return res.status(403).json({ message: error.message });
    }
    if (error.message.includes('Tytuł musi mieć') || error.message.includes('Treść musi mieć')) {
      return res.status(400).json({ message: error.message });
    }
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

// DELETE /api/articles/:id
const deleteArticle = async (req, res) => {
  try {
    const { id } = req.params;
    await articleService.deleteArticle(id, req.user._id, req.user.role);
    return res.status(204).end();
  } catch (error) {
    console.error('Błąd usuwania artykułu:', error);
    if (error.message === 'Artykuł nie istnieje') {
      return res.status(404).json({ message: error.message });
    }
    if (error.message === 'Brak uprawnień') {
      return res.status(403).json({ message: error.message });
    }
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

// POST /api/articles/:id/like
const toggleLikeArticle = async (req, res) => {
  try {
    const { id } = req.params;
    const result = await articleService.toggleLikeArticle(id, req.user._id);
    return res.json(result);
  } catch (error) {
    console.error('Błąd toggle lajka artykułu:', error);
    if (error.message === 'Artykuł nie znaleziony') {
      return res.status(404).json({ message: error.message });
    }
    if (error.message === 'Autor nie może polubić własnego artykułu') {
      return res.status(400).json({
        message: error.message,
        liked: false,
        totalLikes: 0,
      });
    }
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

module.exports = {
  createArticle,
  getArticles,
  getArticleById,
  updateArticle,
  deleteArticle,
  toggleLikeArticle,
};

==================================
authController.js v.1
==================================

const authService = require('../services/authService');

// ZMIANA 1: Uproszczono baseCookieOptions dla lokalnego środowiska
const baseCookieOptions = {
  httpOnly: true,
  sameSite: 'lax',
  secure: false,
  path: '/'
};

// Rejestracja — użytkownik oczekujący na zatwierdzenie
const registerPending = async (req, res) => {
  try {
    const { username, email, password, role } = req.body;
    await authService.registerPending(username, email, password, role);
    res.status(201).json({ message: 'Wniosek o rejestrację został przesłany.' });
  } catch (error) {
    if (error.message.includes('Email jest już zajęty') || error.message.includes('jest wymagana')) {
      return res.status(400).json({ message: error.message });
    }
    res.status(500).json({ message: 'Błąd serwera.', error });
  }
};

// Logowanie
const login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const token = await authService.login(email, password);

    res.cookie('token', token, {
      ...baseCookieOptions,
      maxAge: 24 * 60 * 60 * 1000 // 1 dzień
    });

    res.json({ message: 'Zalogowano pomyślnie.' });
  } catch (error) {
    if (error.message.includes('Nieprawidłowy email lub hasło') || error.message.includes('jest wymagane')) {
      return res.status(400).json({ message: error.message });
    }
    res.status(500).json({ message: 'Błąd serwera.', error });
  }
};

// Wylogowanie
const logout = (req, res) => {
  res.clearCookie('token', {
    ...baseCookieOptions
  });
  res.json({ message: 'Wylogowano.' });
};

module.exports = {
  registerPending,
  login,
  logout
};

==================================
commentController.js v.1
==================================

const commentService = require('../services/commentService');

// POST /api/comments/:id
const addComment = async (req, res) => {
  try {
    const articleId = req.params.id;
    const rawText = req.body?.text ?? '';
    const comment = await commentService.addComment(articleId, req.user._id, rawText);
    return res.status(201).json(comment);
  } catch (error) {
    console.error('Błąd podczas dodawania komentarza:', error);
    if (
      error.message.includes('Komentarz nie może być pusty') ||
      error.message.includes('co najmniej 6 znaków') ||
      error.message.includes('odfiltrowaniu')
    ) {
      return res.status(400).json({ message: error.message });
    }
    if (error.message.includes('Nie znaleziono artykułu')) {
      return res.status(404).json({ message: error.message });
    }
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

// GET /api/comments/:id
const getComments = async (req, res) => {
  try {
    const articleId = req.params.id;
    const comments = await commentService.getComments(articleId);
    return res.json(comments);
  } catch (error) {
    console.error('Błąd podczas pobierania komentarzy:', error);
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

// PUT /api/comments/:id
const updateComment = async (req, res) => {
  try {
    const commentId = req.params.id;
    const rawText = req.body?.text ?? '';
    const comment = await commentService.updateComment(commentId, req.user._id, req.user.role, rawText);
    return res.json(comment);
  } catch (error) {
    console.error('Błąd podczas edycji komentarza:', error);
    if (
      error.message.includes('Komentarz nie może być pusty') ||
      error.message.includes('co najmniej 6 znaków') ||
      error.message.includes('odfiltrowaniu')
    ) {
      return res.status(400).json({ message: error.message });
    }
    if (error.message.includes('Komentarz nie istnieje')) {
      return res.status(404).json({ message: error.message });
    }
    if (error.message.includes('Brak uprawnień')) {
      return res.status(403).json({ message: error.message });
    }
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

// DELETE /api/comments/:id
const deleteComment = async (req, res) => {
  try {
    const commentId = req.params.id;
    await commentService.deleteComment(commentId, req.user._id, req.user.role);
    return res.status(204).end();
  } catch (error) {
    console.error('Błąd podczas usuwania komentarza:', error);
    if (error.message.includes('Komentarz nie istnieje')) {
      return res.status(404).json({ message: error.message });
    }
    if (error.message.includes('Brak uprawnień')) {
      return res.status(403).json({ message: error.message });
    }
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

module.exports = {
  addComment,
  getComments,
  updateComment,
  deleteComment,
};

==================================
userController.js v.1
==================================

const userService = require('../services/userService');

// GET /api/users/profile
const getProfile = async (req, res) => {
  try {
    if (!req.user) return res.status(401).json({ message: 'Brak autoryzacji' });
    const user = await userService.getProfile(req.user._id);
    return res.json(user);
  } catch (err) {
    console.error('Błąd getProfile:', err);
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

// PUT /api/users/profile
const updateProfile = async (req, res) => {
  try {
    if (!req.user) return res.status(401).json({ message: 'Brak autoryzacji' });
    const user = await userService.updateProfile(req.user._id, req.body);
    return res.json({ message: 'Profil zaktualizowany', user });
  } catch (err) {
    console.error('Błąd updateProfile:', err);
    if (err.message.includes('Nazwa użytkownika')) {
      return res.status(400).json({ message: err.message });
    }
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

// PUT /api/users/password
const changePassword = async (req, res) => {
  try {
    if (!req.user) return res.status(401).json({ message: 'Brak autoryzacji' });
    const { oldPassword, newPassword } = req.body;
    await userService.changePassword(req.user._id, oldPassword, newPassword);
    return res.json({ message: 'Hasło zostało zmienione.' });
  } catch (err) {
    console.error('Błąd changePassword:', err);
    if (err.message.includes('Stare hasło') || err.message.includes('Nowe hasło')) {
      return res.status(400).json({ message: err.message });
    }
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

// GET /api/users (admin)
const listUsers = async (req, res) => {
  try {
    const users = await userService.listUsers();
    return res.json(users);
  } catch (err) {
    console.error('Błąd listUsers:', err);
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

// PUT /api/users/:id/role (admin)
const changeRole = async (req, res) => {
  try {
    const { id } = req.params;
    const { role } = req.body;
    const user = await userService.changeRole(id, role);
    return res.json({ message: 'Rola zaktualizowana.', user });
  } catch (err) {
    console.error('Błąd changeRole:', err);
    if (err.message.includes('Rola') || err.message.includes('Nieprawidłowa')) {
      return res.status(400).json({ message: err.message });
    }
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

// DELETE /api/users/:id (admin)
const deleteUser = async (req, res) => {
  try {
    const { id } = req.params;
    await userService.deleteUser(id);
    return res.status(204).end();
  } catch (err) {
    console.error('Błąd deleteUser:', err);
    if (err.message.includes('Użytkownik nie istnieje')) {
      return res.status(404).json({ message: err.message });
    }
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

module.exports = {
  getProfile,
  updateProfile,
  changePassword,
  listUsers,
  changeRole,
  deleteUser,
};

==================================
authMiddleware.js v.1
==================================

// middleware/authMiddleware.js v.2
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const AppError = require("../utils/AppError");

// Middleware sprawdzający czy użytkownik jest zalogowany i ważny token
const requireAuth = async (req, res, next) => {
    const token = req.cookies.token;

    if (!token) {
        return next(new AppError("Brak tokena. Dostęp zabroniony.", 401));
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const user = await User.findById(decoded.id).select("-password");

        if (!user) {
            return next(new AppError("Użytkownik nie istnieje", 401));
        }

        req.user = user;
        next();
    } catch (_error) {
        next(new AppError("Nieprawidłowy token.", 401));
    }
};

module.exports = requireAuth;


==================================
isAuthor.js v.1
==================================

// middleware/isAuthor.js v.2
const Article = require("../models/Article");
const AppError = require("../utils/AppError");

const isAuthor = async (req, res, next) => {
    try {
        const article = await Article.findById(req.params.id);

        if (!article) {
            return next(new AppError("Artykuł nie znaleziony", 404));
        }

        if (article.author.toString() !== req.user._id.toString()) {
            return next(new AppError("Brak uprawnień do edycji lub usunięcia tego artykułu", 403));
        }

        next();
    } catch (err) {
        next(err);
    }
};

module.exports = isAuthor;


==================================
isCommentAuthor.js v.1
==================================

// middleware/isCommentAuthor.js v.2
const Comment = require("../models/Comment");
const AppError = require("../utils/AppError");

const isCommentAuthor = async (req, res, next) => {
    try {
        const comment = await Comment.findById(req.params.id);
        if (!comment) return next(new AppError("Komentarz nie znaleziony", 404));

        if (comment.author.toString() !== req.user._id.toString()) {
            return next(new AppError("Brak uprawnień do wykonania tej operacji", 403));
        }

        next();
    } catch (err) {
        next(err);
    }
};

module.exports = isCommentAuthor;


==================================
requireAdmin.js v.1
==================================

// middleware/requireAdmin.js v.2
const AppError = require("../utils/AppError");

module.exports = (req, res, next) => {
    if (!req.user) {
        return next(new AppError("Brak autoryzacji", 401));
    }
    if (req.user.role !== "admin") {
        return next(new AppError("Brak dostępu — wymagane uprawnienia administratora", 403));
    }
    next();
};


==================================
requireAuthorOrAdmin.js v.1
==================================

// middleware/requireAuthorOrAdmin.js v.2
const Article = require("../models/Article");
const AppError = require("../utils/AppError");

module.exports = async function requireAuthorOrAdmin(req, res, next) {
    try {
        const { id } = req.params;
        const article = await Article.findById(id);
        if (!article) return next(new AppError("Artykuł nie istnieje.", 404));

        const isOwner = String(article.author) === String(req.user._id);
        const isAdmin = req.user.role === "admin";
        if (!isOwner && !isAdmin) {
            return next(new AppError("Brak uprawnień.", 403));
        }

        req.article = article;
        next();
    } catch (e) {
        next(e);
    }
};


==================================
upload.js v.1
==================================

// middleware/upload.js
const multer = require('multer')
const path = require('path')

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, '..', 'uploads'))
  },
  filename: (req, file, cb) => {
    const unique = Date.now() + '-' + Math.round(Math.random() * 1e9)
    const ext = path.extname(file.originalname || '')
    cb(null, `${unique}${ext}`)
  }
})

function fileFilter(req, file, cb) {
  if (!file.mimetype || !file.mimetype.startsWith('image/')) {
    return cb(new Error('Dozwolone są tylko pliki graficzne.'), false)
  }
  cb(null, true)
}

const upload = multer({
  storage,
  fileFilter,
  limits: { fileSize: 5 * 1024 * 1024, files: 5 } // 5MB, max 5 plików
})

module.exports = upload


==================================
validateObjectId.js v.1
==================================

// middleware/validateObjectId.js v.1
const mongoose = require('mongoose');
const AppError = require('../utils/AppError');

const validateObjectId = (paramName = 'id') => {
  return (req, res, next) => {
    const id = req.params[paramName];
    
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return next(new AppError(`Nieprawidłowy format ID: ${id}`, 400));
    }
    
    next();
  };
};

module.exports = validateObjectId;

==================================
Article.js v.1
==================================

// models/Article.js v.2
const mongoose = require("mongoose");

const articleSchema = new mongoose.Schema(
    {
        title: {
            type: String,
            required: true,
            trim: true,
        },
        content: {
            type: String,
            required: true,
        },
        author: {
            type: mongoose.Schema.Types.ObjectId,
            ref: "User",
            required: true,
        },
        images: [{ type: String }],
        likes: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],
    },
    {
        timestamps: true,
    }
);

// Dodanie indeksów dla optymalizacji
articleSchema.index({ author: 1, createdAt: -1 }); // dla listy artykułów usera
articleSchema.index({ title: "text", content: "text" }); // dla wyszukiwania tekstowego

module.exports = mongoose.model("Article", articleSchema);


==================================
Comment.js v.1
==================================

// models/Comment.js v.2
const mongoose = require("mongoose");

const commentSchema = new mongoose.Schema({
    article: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Article",
        required: true,
        index: true, // ✅ Dodany indeks
    },
    author: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
        required: true,
    },
    text: {
        type: String,
        required: true,
        trim: true,
    },
    likes: [
        {
            type: mongoose.Schema.Types.ObjectId,
            ref: "User",
        },
    ],
    createdAt: {
        type: Date,
        default: Date.now,
    },
});

module.exports = mongoose.model("Comment", commentSchema);


==================================
PendingUser.js v.1
==================================

// models/PendingUser.js v.2
const mongoose = require("mongoose");

const pendingUserSchema = new mongoose.Schema({
    username: {
        type: String,
        required: true,
        trim: true,
    },
    email: {
        type: String,
        required: true,
        unique: true,
        trim: true,
        lowercase: true,
        match: /^[\w.-]+@([\w-]+\.)+[\w-]{2,4}$/,
    },
    password: {
        type: String,
        required: true,
    },
    role: {
        type: String,
        enum: ["user", "author"],
        default: "user",
    },
    createdAt: {
        type: Date,
        default: Date.now,
        expires: 86400, // ✅ Automatyczne usuwanie po 24 godzinach
    },
});

module.exports = mongoose.model("PendingUser", pendingUserSchema);


==================================
User.js v.1
==================================

// models/User.js v.2
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");

const userSchema = new mongoose.Schema({
    username: {
        type: String,
        required: true,
        unique: true,
        trim: true,
    },
    email: {
        type: String,
        required: true,
        unique: true,
        lowercase: true,
        trim: true,
        match: [/^[^\s@]+@[^\s@]+\.[^\s@]+$/, "Nieprawidłowy format adresu e-mail"],
        index: true, // ✅ Dodany indeks
    },
    password: {
        type: String,
        required: true,
        minlength: 6,
    },
    role: {
        type: String,
        enum: ["user", "author", "admin"],
        default: "user",
    },
});

userSchema.pre("save", async function (next) {
    if (!this.isModified("password")) return next();

    const isBcrypt = typeof this.password === "string" && /^\$2[aby]\$\d{2}\$[./A-Za-z0-9]{53}$/.test(this.password);
    if (isBcrypt) return next();

    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
});

userSchema.methods.comparePassword = async function (candidatePassword) {
    return await bcrypt.compare(candidatePassword, this.password);
};

module.exports = mongoose.model("User", userSchema);


==================================
adminRoutes.js v.1
==================================

const express = require('express')
const router = express.Router()
const requireAuth = require('../middleware/authMiddleware')
const requireAdmin = require('../middleware/requireAdmin')

const {
  getPendingUsers,
  approveUser,
  rejectUser
} = require('../controllers/adminController')

router.get('/pending-users', requireAuth, requireAdmin, getPendingUsers)
router.post('/approve/:id', requireAuth, requireAdmin, approveUser)
router.delete('/reject/:id', requireAuth, requireAdmin, rejectUser)

module.exports = router

==================================
articleRoutes.js v.1
==================================

const express = require("express");
const router = express.Router();
const { createArticle, getArticles, getArticleById, updateArticle, deleteArticle, toggleLikeArticle } = require("../controllers/articleController");
const upload = require("../middleware/upload");
const requireAuth = require("../middleware/authMiddleware");
const requireAuthorOrAdmin = require("../middleware/requireAuthorOrAdmin");
const validateObjectId = require("../middleware/validateObjectId");
const { validateArticle } = require("../utils/advancedValidate"); // ✅ DODANE

// Lista i pojedynczy artykuł
router.get("/", getArticles);
router.get("/:id", validateObjectId(), getArticleById); // DODANE middleware

// Tworzenie / edycja / usuwanie (z autoryzacją)
router.post("/", requireAuth, upload.array("images", 5), validateArticle, createArticle); // ✅
router.put("/:id", validateObjectId(), requireAuth, requireAuthorOrAdmin, upload.array("images", 5), validateArticle, updateArticle); // ✅
router.delete("/:id", validateObjectId(), requireAuth, requireAuthorOrAdmin, deleteArticle); // DODANE

// Lajk artykułu
router.post("/:id/like", validateObjectId(), requireAuth, toggleLikeArticle); // DODANE

module.exports = router;


==================================
authRoutes.js v.1
==================================

// routes/authRoutes.js v.2
const express = require("express");
const router = express.Router();
const { login, logout, registerPending } = require("../controllers/authController");
const { validateRegister, validateLogin } = require("../utils/advancedValidate"); // ✅ DODANE

// Logowanie
router.post("/login", validateLogin, login); // ✅ DODANA WALIDACJA

// Wylogowanie
router.post("/logout", logout);

// Rejestracja
router.post("/register-pending", validateRegister, registerPending); // ✅ DODANA WALIDACJA

module.exports = router;


==================================
commentRoutes.js v.1
==================================

const express = require("express");
const router = express.Router();
const { addComment, getComments, deleteComment, updateComment } = require("../controllers/commentController");
const requireAuth = require("../middleware/authMiddleware");
const validateObjectId = require("../middleware/validateObjectId");
const { validateComment } = require("../utils/advancedValidate"); // ✅ DODANE

// Komentarze do artykułu (id = articleId)
router.get("/:id", validateObjectId(), getComments); // DODANE
router.post("/:id", validateObjectId(), requireAuth, validateComment, addComment); // ✅

// Operacje na konkretnym komentarzu (id = commentId)
router.put("/:id", validateObjectId(), requireAuth, validateComment, updateComment); // ✅
router.delete("/:id", validateObjectId(), requireAuth, deleteComment);

module.exports = router;


==================================
userRoutes.js v.1
==================================

const express = require("express");
const router = express.Router();
const requireAuth = require("../middleware/authMiddleware");
const requireAdmin = require("../middleware/requireAdmin");
const { getProfile, updateProfile, changePassword, listUsers, changeRole, deleteUser } = require("../controllers/userController");
const { validateUserUpdate } = require("../utils/advancedValidate"); // ✅ DODANE (trzeba dodać do advancedValidate)

// Profil zalogowanego użytkownika
router.get("/profile", requireAuth, getProfile);
router.put("/profile", requireAuth, validateUserUpdate, updateProfile);
router.put("/password", requireAuth, changePassword);

// Admin – tylko dla roli 'admin'
router.get("/", requireAuth, requireAdmin, listUsers);
router.put("/:id/role", requireAuth, requireAdmin, changeRole);
router.delete("/:id", requireAuth, requireAdmin, deleteUser);

module.exports = router;


==================================
1754068886780-2025-05-08_17-46-27(1)-01.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754152749228-92812186_3218584588186739_8353233957860409344_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754156567535-92989817_3218584841520047_9082093743397404672_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754241925862-92989817_3218584841520047_9082093743397404672_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754310977682-92812186_3218584588186739_8353233957860409344_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754310977688-92948159_3218584998186698_4977806751773491200_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754310977693-92989817_3218584841520047_9082093743397404672_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754310977698-93254356_3218584681520063_688158527956451328_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754310977702-93303604_3218584784853386_6430330249937944576_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754332478792-93254356_3218584681520063_688158527956451328_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754332492051-93254356_3218584681520063_688158527956451328_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754332582184-93303604_3218584784853386_6430330249937944576_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754332738296-92948159_3218584998186698_4977806751773491200_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754332774555-92989817_3218584841520047_9082093743397404672_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754367503118-93303604_3218584784853386_6430330249937944576_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754387409764-92948159_3218584998186698_4977806751773491200_n.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754462018664-415954181.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754462123958-301796897.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754462384224-743992369.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754462515056-53701265.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754466490832-679145436.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754487751546-136461086.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754487788362-92598928.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754487826811-398469964.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754487826814-856807431.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754487826816-273726342.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754488665308-463888655.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754491303538-69773656.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754497317961-377443572.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1754497317966-945997040.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1756234408292-979512228.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
1756318975759-173818095.jpg v.1
==================================

<plik binarny, nie wyświetlono zawartości>

==================================
AppError.js v.1
==================================

// utils/AppError.js v.1
class AppError extends Error {
  constructor(message, statusCode) {
    super(message);
    this.statusCode = statusCode;
    this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';
    this.isOperational = true;

    Error.captureStackTrace(this, this.constructor);
  }
}

module.exports = AppError;

==================================
advancedValidate.js v.1
==================================

// utils/advancedValidate.js v.1
const { validationResult, body } = require("express-validator");

// Middleware do obsługi błędów walidacji
const handleValidationErrors = (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        const errorMessages = errors.array().map((error) => error.msg);
        return res.status(400).json({
            status: "fail",
            message: errorMessages.join(" "),
        });
    }
    next();
};

// Walidacja rejestracji
const validateRegister = [body("username").isLength({ min: 3 }).withMessage("Nazwa użytkownika musi mieć co najmniej 3 znaki").trim().escape(), body("email").isEmail().withMessage("Podaj prawidłowy adres email").normalizeEmail(), body("password").isLength({ min: 6 }).withMessage("Hasło musi mieć co najmniej 6 znaków"), body("role").isIn(["user", "author"]).withMessage("Nieprawidłowa rola"), handleValidationErrors];

// Walidacja logowania
const validateLogin = [body("email").isEmail().withMessage("Podaj prawidłowy adres email").normalizeEmail(), body("password").notEmpty().withMessage("Hasło jest wymagane"), handleValidationErrors];

// Walidacja artykułu
const validateArticle = [body("title").isLength({ min: 5 }).withMessage("Tytuł musi mieć co najmniej 5 znaków").trim().escape(), body("content").isLength({ min: 20 }).withMessage("Treść musi mieć co najmniej 20 znaków").trim(), handleValidationErrors];

// Walidacja komentarza
const validateComment = [body("text").isLength({ min: 6 }).withMessage("Komentarz musi mieć co najmniej 6 znaków").trim().escape(), handleValidationErrors];

// Walidacja zmiany hasła
const validatePasswordChange = [body("oldPassword").notEmpty().withMessage("Stare hasło jest wymagane"), body("newPassword").isLength({ min: 6 }).withMessage("Nowe hasło musi mieć co najmniej 6 znaków"), handleValidationErrors];

// Walidacja zmiany roli (admin)
const validateRoleChange = [body("role").isIn(["user", "author", "admin"]).withMessage("Nieprawidłowa rola"), handleValidationErrors];

// Walidacja update'u usera
const validateUserUpdate = [body("username").optional().isLength({ min: 3 }).withMessage("Nazwa użytkownika musi mieć co najmniej 3 znaki").trim().escape(), handleValidationErrors];

module.exports = {
    validateRegister,
    validateLogin,
    validateArticle,
    validateComment,
    validatePasswordChange,
    validateRoleChange,
    validateUserUpdate,
    handleValidationErrors,
};


==================================
emailTemplates.js v.1
==================================

// utils/emailTemplates.js
const { APP_NAME = 'CMS' } = process.env

function approvedUserEmail({ username }) {
  const subject = `[${APP_NAME}] Twoje konto zostało zatwierdzone`
  const text = `Cześć ${username || ''},

Twoje konto w ${APP_NAME} zostało zatwierdzone. Możesz się teraz zalogować.

Pozdrawiamy,
Zespół ${APP_NAME}
`
  const html = `
  <p>Cześć ${username || ''},</p>
  <p>Twoje konto w <b>${APP_NAME}</b> zostało <b>zatwierdzone</b>. Możesz się teraz zalogować.</p>
  <p>Pozdrawiamy,<br>Zespół ${APP_NAME}</p>
  `
  return { subject, text, html }
}

function rejectedUserEmail({ username }) {
  const subject = `[${APP_NAME}] Wniosek rejestracyjny odrzucony`
  const text = `Cześć ${username || ''},

Niestety Twój wniosek rejestracyjny do ${APP_NAME} został odrzucony.

Pozdrawiamy,
Zespół ${APP_NAME}
`
  const html = `
  <p>Cześć ${username || ''},</p>
  <p>Niestety Twój wniosek rejestracyjny do <b>${APP_NAME}</b> został odrzucony.</p>
  <p>Pozdrawiamy,<br>Zespół ${APP_NAME}</p>
  `
  return { subject, text, html }
}

module.exports = { approvedUserEmail, rejectedUserEmail }


==================================
mailer.js v.1
==================================

// utils/mailer.js
const nodemailer = require('nodemailer')

const {
  SMTP_HOST,
  SMTP_PORT,
  SMTP_SECURE,
  SMTP_USER,
  SMTP_PASS,
  MAIL_FROM = 'no-reply@example.com'
} = process.env

// pojedynczy transport – wielokrotne użycie
const transporter = nodemailer.createTransport({
  host: SMTP_HOST,
  port: Number(SMTP_PORT) || 587,
  secure: String(SMTP_SECURE) === 'true',
  auth: SMTP_USER && SMTP_PASS ? { user: SMTP_USER, pass: SMTP_PASS } : undefined
})

// prosta funkcja wysyłki
async function sendMail({ to, subject, text, html }) {
  if (!to) throw new Error('Brak adresata (to)')
  const info = await transporter.sendMail({
    from: MAIL_FROM,
    to,
    subject,
    text,
    html
  })
  return info
}

module.exports = { sendMail, transporter }


==================================
sanitize.js v.1
==================================

const sanitizeHtml = require('sanitize-html')

// Tytuły: bez HTML
function sanitizeTitle(text) {
  const s = String(text ?? '')
  return sanitizeHtml(s, { allowedTags: [], allowedAttributes: {} }).trim()
}

// Treść artykułu: lekki whitelist (proste formatowanie + linki)
const BODY_CFG = {
  allowedTags: [
    'b','i','em','strong',
    'a',
    'p','br','ul','ol','li',
    'blockquote','code','pre'
  ],
  allowedAttributes: {
    a: ['href', 'title', 'target', 'rel']
  },
  allowedSchemes: ['http', 'https', 'mailto'],
  disallowedTagsMode: 'discard',
  transformTags: {
    a: (tagName, attribs) => ({
      tagName: 'a',
      attribs: {
        ...attribs,
        target: '_blank',
        rel: 'noopener noreferrer nofollow ugc'
      }
    })
  }
}

function sanitizeBody(html) {
  const s = String(html ?? '')
  return sanitizeHtml(s, BODY_CFG).trim()
}

// Komentarze: jeszcze prostszy whitelist (tekst + linki)
function sanitizeComment(str = '') {
  return sanitizeHtml(String(str), {
    allowedTags: ['b','i','em','strong','u','br','a'],
    allowedAttributes: { a: ['href', 'title', 'target', 'rel'] },
    allowedSchemes: ['http', 'https', 'mailto'],
    disallowedTagsMode: 'discard',
    transformTags: {
      a: (tagName, attribs) => ({
        tagName: 'a',
        attribs: {
          ...attribs,
          target: '_blank',
          rel: 'noopener noreferrer nofollow ugc'
        }
      })
    }
  }).trim()
}

module.exports = { sanitizeTitle, sanitizeBody, sanitizeComment }


==================================
validate.js v.1
==================================

module.exports = function validateFields(fields) {
    const errors = []
    for (const [, [value, msg]] of Object.entries(fields)) {
        if (typeof value === 'string' && value.trim() === '') {
            errors.push(msg)
        }
        if (value === undefined || value === null) {
            errors.push(msg)
        }
    }
    return errors
}

==================================
.env v.1
==================================

# Serwer aplikacji
PORT=5000
MONGO_URI=mongodb://localhost:27017/cms
JWT_SECRET=twoj_tajny_klucz_ktory_nie_jest_prosty^%45
FRONTEND_URL=http://localhost:3000

# SMTP / Email
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=mirruptek7@gmail.com
SMTP_PASS=jcrjnhkarjnjvnql
MAIL_FROM="CMS <no-reply@twojadomena.pl>"

# Inne
APP_NAME=CMS

==================================
server.js v.1
==================================

// server.js v.3
const express = require('express')
const mongoose = require('mongoose')
const dotenv = require('dotenv')
const helmet = require('helmet')
const cookieParser = require('cookie-parser')
const cors = require('cors')
const rateLimit = require('express-rate-limit')
const path = require('path')

dotenv.config()
const app = express()

// Środowisko
const PORT = process.env.PORT || 5000
const MONGO_URI = process.env.MONGO_URI


// Middleware
app.use(helmet())
app.use(express.json())
app.use(cookieParser())

const ALLOWED_ORIGINS = ['http://localhost:3000'];

const corsOptions = {
  origin: (origin, cb) => {
    if (!origin || ALLOWED_ORIGINS.includes(origin)) {
      cb(null, true);
    } else {
      cb(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
};

app.use(cors(corsOptions));

// Rate limit tylko dla /api/auth
const authLimiter = rateLimit({
  windowMs: 60 * 1000,
  max: 1000,
  standardHeaders: true,
  legacyHeaders: false,
  message: { message: 'Zbyt wiele żądań. Spróbuj ponownie później.' }
})
app.use('/api/auth', authLimiter)

// Statyczne pliki (obrazki)
app.use('/uploads', express.static(path.join(__dirname, 'uploads'), {
  setHeaders: (res) => {
    res.setHeader('Cross-Origin-Resource-Policy', 'cross-origin')
  }
}))

// Trasy API
app.use('/api/auth', require('./routes/authRoutes'))
app.use('/api/articles', require('./routes/articleRoutes'))
app.use('/api/comments', require('./routes/commentRoutes'))
app.use('/api/users', require('./routes/userRoutes'))
app.use('/api/admin', require('./routes/adminRoutes'))

// 404 – brak trasy
app.use((req, res) => {
  res.status(404).json({ message: 'Nie znaleziono endpointu.' })
})

// Globalny error handler - musi być na końcu, po wszystkich middleware i routes
app.use((err, req, res) => {
  // 1. SPECJALNE PRZYPADKI (istniejąca logika dla Multera)
  if (err && err.code === 'LIMIT_FILE_SIZE') {
    return res.status(413).json({ message: 'Za duży plik. Limit 5MB.' })
  }
  if (err && err.message && /pliki graficzne|plik[ów]* graficzny|image/i.test(err.message)) {
    return res.status(400).json({ message: 'Dozwolone są tylko pliki graficzne.' })
  }

  // 2. NOWA LOGIKA - AppError i standardowe błędy
  err.statusCode = err.statusCode || 500
  err.status = err.status || 'error'

  // Development - szczegółowe logi
  if (process.env.NODE_ENV === 'development') {
    console.error('ERROR 💥:', err)
    return res.status(err.statusCode).json({
      status: err.status,
      error: err,
      message: err.message,
      stack: err.stack
    })
  }

  // Production - ogólne komunikaty
  if (err.isOperational) {
    // Błędy operacyjne (AppError) - pokazujemy komunikat
    return res.status(err.statusCode).json({
      status: err.status,
      message: err.message
    })
  } else {
    // Nieznane błędy programistyczne - nie pokazujemy szczegółów
    console.error('ERROR 💥:', err)
    return res.status(500).json({
      status: 'error',
      message: 'Coś poszło nie tak!'
    })
  }
})

// Połączenie z MongoDB i start
mongoose.connect(MONGO_URI, {})
  .then(() => {
    console.log('✅ Połączono z MongoDB')

    const conn = mongoose.connection
    console.log(`📦 Baza: ${conn.name}`)
    console.log(`🌐 Host: ${conn.host}`)

    app.listen(PORT, () => console.log(`🚀 Serwer działa na porcie ${PORT}`))
  })
  .catch((err) => {
    console.error('❌ Błąd połączenia z MongoDB:', err)
    process.exit(1)
  })
