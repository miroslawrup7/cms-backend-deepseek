const sanitizeHtml = require('sanitize-html');

// ðŸš€ TytuÅ‚y â€“ usuÅ„ caÅ‚kowicie HTML, ale zachowaj tekst wewnÄ…trz
function sanitizeTitle(text) {
  const s = String(text ?? '');
  return sanitizeHtml(s, {
    allowedTags: [], // brak dozwolonych tagÃ³w
    allowedAttributes: {},
    disallowedTagsMode: 'discard',
    nonTextTags: ['script', 'style'], // usuwa caÅ‚e tagi i zachowuje tylko tekst wewnÄ…trz
    textFilter: (txt, tagName) => txt, // zwraca tekst wewnÄ…trz tagÃ³w
  }).trim();
}

// ðŸš€ TreÅ›Ä‡ artykuÅ‚Ã³w â€“ escapuj HTML (np. <b> â†’ &lt;b&gt;)
function sanitizeBody(html) {
  const s = String(html ?? '');
  return sanitizeHtml(s, {
    allowedTags: [],
    allowedAttributes: {},
    disallowedTagsMode: 'escape', // escapowanie zamiast usuwania
  }).trim();
}

// ðŸš€ Komentarze â€“ escapuj HTML zamiast usuwaÄ‡
function sanitizeComment(str = '') {
  return sanitizeHtml(String(str), {
    allowedTags: [],
    allowedAttributes: {},
    disallowedTagsMode: 'escape', // escapujemy HTML
  }).trim();
}

// ðŸš€ Bardzo restrykcyjna sanitizacja, np. limity dÅ‚ugoÅ›ci
const STRICT_SANITIZE_CONFIG = {
  allowedTags: [],
  allowedAttributes: {},
  disallowedTagsMode: 'discard',
};

function sanitizeStrict(text) {
  return sanitizeHtml(String(text || ''), STRICT_SANITIZE_CONFIG)
    .trim()
    .substring(0, 500);
}

module.exports = {
  sanitizeTitle,
  sanitizeBody,
  sanitizeComment,
  sanitizeStrict,
};
