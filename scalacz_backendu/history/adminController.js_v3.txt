const logger = require('../utils/logger');
const bcrypt = require('bcryptjs');
const PendingUser = require('../models/PendingUser');
const User = require('../models/User');
const { sanitizeTitle } = require('../utils/sanitize');
const { sendMail } = require('../utils/mailer');
const { approvedUserEmail, rejectedUserEmail } = require('../utils/emailTemplates');
const AppError = require('../utils/AppError');

// GET /api/admin/pending-users
const getPendingUsers = async (req, res, next) => {
  try {
    const { search = '', page = 1, limit = 10 } = req.query;

    const query = {
      $or: [
        { username: { $regex: search, $options: 'i' } },
        { email: { $regex: search, $options: 'i' } },
      ],
    };

    const skip = (parseInt(page) - 1) * parseInt(limit);

    const [total, users] = await Promise.all([
      PendingUser.countDocuments(query),
      PendingUser.find(query).sort({ createdAt: -1 }).skip(skip).limit(parseInt(limit)).lean(),
    ]);

    res.json({
      total,
      page: parseInt(page),
      limit: parseInt(limit),
      users,
    });
  } catch (error) {
    next(error);
  }
};

// POST /api/admin/approve/:id
const approveUser = async (req, res, next) => {
  try {
    const { id } = req.params;
    const pending = await PendingUser.findById(id);
    if (!pending) return next(new AppError('Wniosek nie istnieje.', 404));

    const exists = await User.findOne({ email: pending.email });
    if (exists) {
      await pending.deleteOne();
      return next(new AppError('Email jest już zajęty w systemie.', 400));
    }

    const hashed = await bcrypt.hash(String(pending.password), 10);
    const user = new User({
      username: sanitizeTitle(pending.username),
      email: pending.email,
      password: hashed,
      role: pending.role,
    });
    await user.save();

    await pending.deleteOne();

    // wysyłka maila (best-effort)
    try {
      const tpl = approvedUserEmail({ username: user.username, email: user.email });
      await sendMail({
        to: user.email,
        subject: tpl.subject,
        text: tpl.text,
        html: tpl.html,
      });
    } catch (mailError) {
      logger.warn('approveUser: mail send failed:', mailError?.message || mailError);
    }

    return res.json({
      message: 'Użytkownik zatwierdzony i dodany do systemu.',
      userId: user._id,
    });
  } catch (error) {
    next(error);
  }
};

// DELETE /api/admin/reject/:id
const rejectUser = async (req, res, next) => {
  try {
    const { id } = req.params;
    const pending = await PendingUser.findById(id);
    if (!pending) return next(new AppError('Wniosek nie istnieje.', 404));

    // wysyłka maila (best-effort)
    try {
      const tpl = rejectedUserEmail({ username: pending.username, email: pending.email });
      await sendMail({
        to: pending.email,
        subject: tpl.subject,
        text: tpl.text,
        html: tpl.html,
      });
    } catch (mailError) {
      logger.warn('rejectUser: mail send failed:', mailError?.message || mailError);
    }

    await pending.deleteOne();
    return res.json({ message: 'Wniosek został odrzucony.' });
  } catch (error) {
    next(error);
  }
};

module.exports = {
  getPendingUsers,
  approveUser,
  rejectUser,
};